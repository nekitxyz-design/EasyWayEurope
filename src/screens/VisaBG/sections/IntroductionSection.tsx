import React from "react";
import { Button } from "../../../components/ui/button";
import { Card, CardContent, CardHeader } from "../../../components/ui/card";
import { ScrollArea, ScrollBar } from "../../../components/ui/scroll-area";

// Define plan features data structure
interface PlanFeature {
  text: string;
  included: boolean;
}

// Define plan data structure
interface Plan {
  title: string;
  description: string;
  price: string;
  buttonText: string;
  buttonVariant:
    | "default"
    | "primary"
    | "outline"
    | "secondary"
    | "ghost"
    | "link"
    | "destructive";
  buttonTextColor: string;
  headerBgColor: string;
  headerTextColor: string;
  features: PlanFeature[];
}

export const IntroductionSection = (): JSX.Element => {
  // Basic plan features
  const basicPlanFeatures: PlanFeature[] = [
    { text: "‚ôü –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", included: true },
    { text: "üìë –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", included: true },
    { text: "ü§ù –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –í–ù–ñ", included: true },
    { text: "üìç –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞", included: false },
    { text: "üè¶ –ü–æ–º–æ—â—å –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞", included: false },
    { text: "üõ° –ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏", included: false },
    { text: "üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞—à–µ–≥–æ —Ç–æ—Ä–≥. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞", included: true },
  ];

  // Standard plan features
  const standardPlanFeatures: PlanFeature[] = [
    { text: "‚ôü –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", included: true },
    { text: "üìë –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", included: true },
    { text: "ü§ù –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –í–ù–ñ", included: true },
    { text: "üìç –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞", included: true },
    { text: "üè¶ –ü–æ–º–æ—â—å –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞", included: true },
    { text: "üõ° –ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏", included: true },
    { text: "üë• –í–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—à–µ —Ç–æ—Ä–≥. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", included: true },
  ];

  // Individual plan benefits
  const individualPlanBenefits: string[] = [
    "üë® –†–µ–ª–æ–∫–∞—Ü–∏—è –≤—Å–µ–π —Å–µ–º—å–∏",
    "üìà –†–µ—à–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
    "üí° –ü–æ–º–æ—â—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö",
    "‚ú® –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
  ];

  // Plans data
  const plans: Plan[] = [
    {
      title: "–ë–∞–∑–æ–≤—ã–π",
      description: "–î–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è.",
      price: "‚Äî 1500 ‚Ç¨",
      buttonText: "–í—ã–±—Ä–∞—Ç—å",
      buttonVariant: "default",
      buttonTextColor: "text-black",
      headerBgColor: "bg-[#f0efef]",
      headerTextColor: "text-black",
      features: basicPlanFeatures,
    },
    {
      title: "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
      description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ¬´–ø–æ–¥ –∫–ª—é—á¬ª –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞.",
      price: "‚Äî 4500 ‚Ç¨",
      buttonText: "–í—ã–±—Ä–∞—Ç—å",
      buttonVariant: "default",
      buttonTextColor: "text-black",
      headerBgColor: "bg-[#0023e9]",
      headerTextColor: "text-white",
      features: standardPlanFeatures,
    },
  ];

  return (
    <section className="flex flex-col items-start gap-[22px] px-4 py-12 bg-[#ff22224c] w-full backdrop-blur-[2px] backdrop-brightness-[100%] [-webkit-backdrop-filter:blur(2px)_brightness(100%)]">
      <h1 className="font-font-h-1 text-font-h-1 text-[#f3fcf0]">
        –¢–∞—Ä–∏—Ñ—ã
      </h1>

      <div className="flex items-start gap-[22px] w-full bg-white rounded">
        <div className="w-[106px] h-[5px] bg-[#0023e9] rounded-[4px_0px_0px_4px]" />
      </div>

      <ScrollArea className="w-full">
        <div className="flex items-start gap-[22px] pb-4">
          {plans.map((plan, index) => (
            <Card
              key={index}
              className="w-[323px] bg-[#ffffffe0] rounded-[10px] overflow-hidden flex-shrink-0"
            >
              <CardHeader
                className={`flex flex-col items-start justify-center gap-[19px] px-[15px] py-6 ${plan.headerBgColor}`}
              >
                <h2
                  className={`self-stretch font-font-h-2 text-font-h-2 ${plan.headerTextColor}`}
                >
                  {plan.title}
                </h2>
                <p
                  className={`self-stretch font-font-body text-font-body ${plan.headerTextColor}`}
                >
                  {plan.description}
                </p>
                <p
                  className={`self-stretch font-font-h-2 text-font-h-2 ${plan.headerTextColor}`}
                >
                  {plan.price}
                </p>
                <Button
                  variant="accent"
                  size="full"
                  className={`${plan.buttonTextColor}`}
                >
                  {plan.buttonText}
                </Button>
              </CardHeader>
              <CardContent className="flex flex-col items-start gap-3 px-4 py-6">
                {plan.features.map((feature, featureIndex) => (
                  <div
                    key={featureIndex}
                    className="flex items-start gap-3 w-full"
                  >
                    <p className="w-56 font-font-body text-font-body text-black">
                      {feature.text}
                    </p>
                    <span className="font-font-h-2 text-font-h-2 text-white whitespace-nowrap">
                      {feature.included ? "‚úÖ" : "‚ùå"}
                    </span>
                  </div>
                ))}
              </CardContent>
            </Card>
          ))}

          <div className="flex flex-col items-start justify-center gap-4 flex-shrink-0">
            <Card className="w-[323px] bg-[#ffffffe0] rounded-[10px] overflow-hidden">
              <CardHeader className="flex flex-col items-start justify-center gap-[19px] px-[15px] py-6 bg-[#f0efef]">
                <h2 className="self-stretch font-font-h-2 text-font-h-2 text-black">
                  –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π
                </h2>
                <p className="self-stretch font-font-body text-font-body text-black">
                  –î–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ –æ—Å–æ–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
                </p>
                <p className="self-stretch font-font-h-2 text-font-h-2 text-black">
                  –ü–æ –∑–∞–ø—Ä–æ—Å—É
                </p>
                <Button variant="primary" size="full" className="text-[#f3fcf0]">
                  –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
                </Button>
              </CardHeader>
              <CardContent className="flex flex-col items-start gap-3 p-4">
                <p className="w-56 font-font-body text-font-body text-black">
                  –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:
                </p>
                {individualPlanBenefits.map((benefit, index) => (
                  <p
                    key={index}
                    className="w-[285px] font-font-body text-font-body text-black"
                  >
                    {benefit}
                  </p>
                ))}
              </CardContent>
            </Card>

            {/* –£–¥–∞–ª—è—é –±–ª–æ–∫ —Å –ø–æ–¥–∞—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã */}
          </div>
        </div>
        <ScrollBar orientation="horizontal" />
      </ScrollArea>
    </section>
  );
};
