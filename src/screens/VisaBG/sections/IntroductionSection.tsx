import React from "react";
import { Button } from "../../../components/ui/button";
import { Card, CardContent, CardHeader } from "../../../components/ui/card";

// Define plan features data structure
interface PlanFeature {
  text: string;
  included: boolean;
}

  // Define plan data structure
  interface Plan {
    title: string;
    description: string;
    price: string;
    buttonText: string;
    buttonTextColor: string;
    headerBgColor: string;
    headerTextColor: string;
    features: PlanFeature[];
  }

export const IntroductionSection = ({ setSelectedTariff }: { setSelectedTariff: (value: string) => void }) => {
  // Basic plan features
  const basicPlanFeatures: PlanFeature[] = [
    { text: "‚ôüÔ∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", included: true },
    { text: "üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è  —Ç–æ—Ä–≥. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", included: true },
    { text: "üìç –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞", included: true },
    { text: "üìë –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", included: true },
    { text: " ü§ù –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –í–ù–ñ", included: true },
    { text: "üìç –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ  –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∏–∑. –ª–∏—Ü–∞", included: false },
    { text: "üè¶ –ü–æ–º–æ—â—å –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞", included: false },
    { text: "üõ°Ô∏è –ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏", included: false },
  ];

  // Standard plan features
  const standardPlanFeatures: PlanFeature[] = [
    { text: "‚ôüÔ∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", included: true },
    { text: "üè¢ –í–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ¬†—Ç–æ—Ä–≥. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", included: true },
    { text: "üìç –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞", included: true },
    { text: "üìë –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", included: true },
    { text: " ü§ù –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –í–ù–ñ", included: true },
    { text: "üìç –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ  –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∏–∑. –ª–∏—Ü–∞", included: true },
    { text: "üè¶ –ü–æ–º–æ—â—å –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞", included: true },
    { text: "üõ°Ô∏è –ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏", included: true },
  ];

  // Individual plan benefits
  const individualPlanBenefits: string[] = [
    "üë® –†–µ–ª–æ–∫–∞—Ü–∏—è –≤—Å–µ–π —Å–µ–º—å–∏",
    "üìà –†–µ—à–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
    "üí° –ü–æ–º–æ—â—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö",
    "üåç¬†–ü–æ–¥–∞—á–∞ –Ω–µ –∏–∑ —Å—Ç—Ä–∞–Ω—ã –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞",
    "üëµ¬†–í–ù–ñ –¥–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤",
    "üá∫üá¶¬†–†–µ—à–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –£–∫—Ä–∞–∏–Ω—ã —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π",
    "‚ú®¬†–õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
  ];

  // Plans data (–≤–∫–ª—é—á–∞—è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π)
  const plans: Plan[] = [
    {
      title: "–ë–∞–∑–æ–≤—ã–π",
      description: "–î–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è.",
      price: "‚Äî 1500 ‚Ç¨",
      buttonText: "–í—ã–±—Ä–∞—Ç—å",
      buttonTextColor: "text-black",
      headerBgColor: "bg-[#f0efef]",
      headerTextColor: "text-black",
      features: basicPlanFeatures,
    },
    {
      title: "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
      description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ¬´–ø–æ–¥ –∫–ª—é—á¬ª –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞.",
      price: "‚Äî 4500 ‚Ç¨",
      buttonText: "–í—ã–±—Ä–∞—Ç—å",
      buttonTextColor: "text-black",
      headerBgColor: "bg-[#0023e9]",
      headerTextColor: "text-white",
      features: standardPlanFeatures,
    },
    {
      title: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π",
      description: "–î–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ –æ—Å–æ–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
      price: "–ü–æ –∑–∞–ø—Ä–æ—Å—É",
      buttonText: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
      buttonTextColor: "text-[#f3fcf0]",
      headerBgColor: "bg-[#f0efef]",
      headerTextColor: "text-black",
      features: [], // –û—Å–æ–±—ã–µ —Ñ–∏—á–∏ –Ω–∏–∂–µ
    },
  ];

  // useRef –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  const cardsScrollRef = React.useRef<HTMLDivElement>(null);

  return (
    <section id="plans" className="flex flex-col items-start gap-[22px] bg-[#ff22224c] w-full backdrop-blur-[2px] backdrop-brightness-[100%] [-webkit-backdrop-filter:blur(2px)_brightness(100%)] md:pt-10 md:pb-10">
      {/* –ë–ª–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
      <div className="w-full md:max-w-[1600px] md:mx-auto md:px-16">
        <div className="px-4 pt-16">
          <h1 className="font-font-h-1 text-font-h-1 text-[#f3fcf0]">
            –¢–∞—Ä–∏—Ñ—ã
          </h1>
        </div>
      </div>

      {/* –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞. –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ wheel/touchmove –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –º–æ–±–∏–ª–∫–µ */}
      
      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ */}
      <div ref={cardsScrollRef} className="w-full overflow-x-auto hide-scrollbar md:max-w-[1600px] md:mx-auto md:px-16" style={{ WebkitOverflowScrolling: 'touch' }}>
        <div
          className="flex md:grid md:grid-cols-3 items-start gap-[22px] md:gap-6 xl:gap-12 pb-12 p-4 snap-x snap-mandatory justify-between"
          style={{ minWidth: `calc(${plans.length} * 323px + ${(plans.length - 1)} * 22px + 16px)` }}
        >
          {plans.map((plan, index) => {
            const isStandard = plan.title === '–°—Ç–∞–Ω–¥–∞—Ä—Ç';
            const isIndividual = plan.title === '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π';
            const cardWidth = 'w-[323px] md:w-full md:min-w-[323px] md:max-w-[420px]';
            const highlight = isStandard ? 'md:shadow-2xl md:border-2 md:border-[#0023e9]' : '';
            return (
              <Card
                key={index}
                className={`${cardWidth} bg-[#ffffffe0] rounded-[10px] overflow-hidden flex-shrink-0 border-none ${highlight}`}
              >
                <CardHeader
                  className={`flex flex-col items-start justify-center gap-[19px] px-[15px] py-6 ${plan.headerBgColor}`}
                >
                  <h2
                    className={`self-stretch font-font-h-2 text-font-h-2 ${plan.headerTextColor}`}
                  >
                    {plan.title}
                  </h2>
                  <p
                    className={`self-stretch font-font-body text-font-body text-[18px] md:text-[18px] leading-normal md:leading-normal ${plan.headerTextColor}`}
                  >
                    {plan.description}
                  </p>
                  <p
                    className={`self-stretch font-font-h-2 text-font-h-2 ${plan.headerTextColor}`}
                  >
                    {plan.price}
                  </p>
                  <Button
                    variant={plan.title === '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π' ? 'primary' : 'white'}
                    size="full"
                    className={plan.title === '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π' ? 'text-[#f3fcf0]' : plan.buttonTextColor}
                    onClick={() => {
                      let value = '';
                      if (plan.title === '–ë–∞–∑–æ–≤—ã–π') value = 'visa';
                      else if (plan.title === '–°—Ç–∞–Ω–¥–∞—Ä—Ç') value = 'citizenship';
                      else if (plan.title === '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π') value = 'consultation';
                      setSelectedTariff(value);
                      setTimeout(() => {
                        document.getElementById('services')?.scrollIntoView({ behavior: 'smooth' });
                      }, 100);
                    }}
                  >
                    {plan.title === '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π' ? '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏' : '–í—ã–±—Ä–∞—Ç—å'}
                  </Button>
                </CardHeader>
                <CardContent className={`flex flex-col items-start gap-3 ${plan.title === '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π' ? 'p-4' : 'px-4 py-6'}`}>
                  {plan.features && plan.features.length > 0 && plan.features.map((feature, featureIndex) => (
                    <div key={featureIndex} className="flex items-start gap-3 w-full">
                      <p className="w-full font-font-body text-font-body text-[18px] md:text-[18px] leading-normal md:leading-normal text-black">
                        {feature.text}
                      </p>
                      <span className="font-font-h-2 text-font-h-2 text-white whitespace-nowrap">
                        {feature.included ? '‚úÖ' : '‚ùå'}
                      </span>
                    </div>
                  ))}
                  {plan.title === '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π' && (
                    <>
                      <p className="w-56 font-font-body text-font-body text-[18px] md:text-[18px] leading-normal md:leading-normal text-black">
                        –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:
                      </p>
                      {individualPlanBenefits.map((benefit, index) => (
                        <p
                          key={index}
                          className="w-[285px] font-font-body text-font-body text-[18px] md:text-[18px] leading-normal md:leading-normal text-black"
                        >
                          {benefit}
                        </p>
                      ))}
                    </>
                  )}
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>
    </section>
  );
};
